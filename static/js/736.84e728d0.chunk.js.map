{"version":3,"file":"static/js/736.84e728d0.chunk.js","mappings":"4QAEaA,EAAMC,EAAAA,GAAAA,IAAH,0DAKHC,EAAKD,EAAAA,GAAAA,GAAH,kHAMFE,EAAKF,EAAAA,GAAAA,GAAH,mH,SCqCf,EA7Ca,WACX,IAAQG,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KAiBA,IAfAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAO,mCAAG,WAAMN,GAAN,mGAEWO,EAAAA,EAAAA,IAAWP,GAFtB,OAENQ,EAFM,OAINC,EAAOD,EAASC,KAAKN,KAE3BC,EAAQK,GANI,sDAQN,IAAIC,MAAM,KAAMC,SARV,yDAAH,sDAWbL,EAAQN,EACT,GAAE,CAACA,IAES,OAATG,EAIJ,OACE,SAACL,EAAD,UACGK,EAAKS,OAAS,EACbT,EAAKU,KAAI,YAA0C,IAAvCC,EAAsC,EAAtCA,GAAIC,EAAkC,EAAlCA,cAAeC,EAAmB,EAAnBA,aACzBC,EAAQD,EAAY,yCACcA,GAClC,oBAEJ,OACE,UAACjB,EAAD,YACE,SAACH,EAAD,CAAKsB,IAAKD,EAAOE,IAAKJ,KACtB,uBAAIA,MAFGD,EAKZ,KAED,uBAAG,aAIV,C","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Img = styled.img`\n  width: 250px;\n  height: auto;\n`;\n\nexport const Ul = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n`;\nexport const Li = styled.li`\n  margin: 15px;\n  list-style: none;\n  box-shadow: 0px 10px 20px 5px rgba(0, 0, 0, 0.3);\n`;\n","import { getCredits } from 'API/fetchMovies';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Ul, Img, Li } from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState(null);\n\n  useEffect(() => {\n    const getCast = async movieId => {\n      try {\n        const response = await getCredits(movieId);\n        // console.log('Cast =>> response', response);\n        const data = response.data.cast;\n        // console.log('Cast =>> data', data);\n        setCast(data);\n      } catch (error) {\n        throw new Error(error.message);\n      }\n    };\n    getCast(movieId);\n  }, [movieId]);\n\n  if (cast === null) {\n    return;\n  }\n\n  return (\n    <Ul>\n      {cast.length > 0 ? (\n        cast.map(({ id, original_name, profile_path }) => {\n          let image = profile_path\n            ? `https://image.tmdb.org/t/p/w500${profile_path}`\n            : 'There is no image';\n\n          return (\n            <Li key={id}>\n              <Img src={image} alt={original_name} />\n              <p>{original_name}</p>\n            </Li>\n          );\n        })\n      ) : (\n        <p>No Cast</p>\n      )}\n    </Ul>\n  );\n};\n\nexport default Cast;\n"],"names":["Img","styled","Ul","Li","movieId","useParams","useState","cast","setCast","useEffect","getCast","getCredits","response","data","Error","message","length","map","id","original_name","profile_path","image","src","alt"],"sourceRoot":""}